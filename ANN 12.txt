import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
#import data
from tensorflow.keras.datasets import fashion_mnist
(X_train,y_train), (X_test, y_test) = fashion_mnist.load_data()
X_train.shape, y_train.shape, X_test.shape, y_test.shape
((60000, 28, 28), (60000,), (10000, 28, 28), (10000,))
#check image
X_train[0]
account_circle
 229, 0],
 [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 183, 225, 216, 223, 228, 235, 227, 224, 222, 224, 221, 223, 245,
 173, 0],
 [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 193, 228, 218, 213, 198, 180, 212, 210, 211, 213, 223, 220, 243,
 202, 0],
 [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 12,
 219, 220, 212, 218, 192, 169, 227, 208, 218, 224, 212, 226, 197,
 209, 52],
 [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 99,
 244, 222, 220, 218, 203, 198, 221, 215, 213, 222, 220, 245, 119,
 167, 56],
 [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 55,
 236, 228, 230, 228, 240, 232, 213, 218, 223, 234, 217, 217, 209,
 92, 0],
 [ 0, 0, 1, 4, 6, 7, 2, 0, 0, 0, 0, 0, 237,
 226, 217, 223, 222, 219, 222, 221, 216, 223, 229, 215, 218, 255,
 77, 0],
 [ 0, 3, 0, 0, 0, 0, 0, 0, 0, 62, 145, 204, 228,
 207, 213, 221, 218, 208, 211, 218, 224, 223, 219, 215, 224, 244,
 159, 0],
 [ 0, 0, 0, 0, 18, 44, 82, 107, 189, 228, 220, 222, 217,
 226, 200, 205, 211, 230, 224, 234, 176, 188, 250, 248, 233, 238,
 215, 0],
 [ 0, 57, 187, 208, 224, 221, 224, 208, 204, 214, 208, 209, 200,
 159, 245, 193, 206, 223, 255, 255, 221, 234, 221, 211, 220, 232,
 246, 0],
 [ 3, 202, 228, 224, 221, 211, 211, 214, 205, 205, 205, 220, 240,
 80, 150, 255, 229, 221, 188, 154, 191, 210, 204, 209, 222, 228,
 225, 0],
 [ 98, 233, 198, 210, 222, 229, 229, 234, 249, 220, 194, 215, 217,
 241, 65, 73, 106, 117, 168, 219, 221, 215, 217, 223, 223, 224,
 229, 29],
 [ 75, 204, 212, 204, 193, 205, 211, 225, 216, 185, 197, 206, 198,
 213, 240, 195, 227, 245, 239, 223, 218, 212, 209, 222, 220, 221,
 230, 67],
 [ 48, 203, 183, 194, 213, 197, 185, 190, 194, 192, 202, 214, 219,
 221, 220, 236, 225, 216, 199, 206, 186, 181, 177, 172, 181, 205,
 206, 115],
 [ 0, 122, 219, 193, 179, 171, 183, 196, 204, 210, 213, 207, 211,
 210, 200, 196, 194, 191, 195, 191, 198, 192, 176, 156, 167, 177,
 210, 92],
 [ 0, 0, 74, 189, 212, 191, 175, 172, 175, 181, 185, 188, 189,
 188, 193, 198, 204, 209, 210, 210, 211, 188, 188, 194, 192, 216,
 170, 0],
 [ 2, 0, 0, 0, 66, 200, 222, 237, 239, 242, 246, 243, 244,
 221, 220, 193, 191, 179, 182, 182, 181, 176, 166, 168, 99, 58,
 0, 0],
 [ 0, 0, 0, 0, 0, 0, 0, 40, 61, 44, 72, 41, 35,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0],
 [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0],
 [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0]], dtype=uint8)
11/8/23, 3:05 AM ANN 12.ipynb - Colaboratory
https://colab.research.google.com/drive/1rDN1bZLaP64KwP2v8t0dbPzXhH43U_uq#printMode=true 2/4
<matplotlib.image.AxesImage at 0x7fb0a95d6050>
#view image
plt.imshow(X_train[0])
X_train = X_train.reshape(60000,28,28,1)
X_test = X_test.reshape(10000,28,28,1)
X_train.max(), X_train.min()
(255, 0)
#scaling
X_train = X_train/255
X_test = X_test/255
X_train.max(), X_train.min()
(1.0, 0.0)
#label
y_train
array([9, 0, 0, ..., 3, 0, 5], dtype=uint8)
np.unique(y_train)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=uint8)
y_train_cat = tf.keras.utils.to_categorical(y_train)
y_train[0]
9
y_train_cat[0]
array([0., 0., 0., 0., 0., 0., 0., 0., 0., 1.], dtype=float32)
# CNN Model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Conv2D, MaxPool2D, Flatten
model = Sequential()
11/8/23, 3:05 AM ANN 12.ipynb - Colaboratory
https://colab.research.google.com/drive/1rDN1bZLaP64KwP2v8t0dbPzXhH43U_uq#printMode=true 3/4
#CNN
model.add(Conv2D(filters=64, kernel_size=(3,3), input_shape=(28,28,1), activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Flatten())
#ANN
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy',
optimizer='adam',
metrics=['accuracy'])
model.summary()
Model: "sequential"
_________________________________________________________________
 Layer (type) Output Shape Param #
=================================================================
 conv2d (Conv2D) (None, 26, 26, 64) 640

 max_pooling2d (MaxPooling2D (None, 13, 13, 64) 0
 )
 flatten (Flatten) (None, 10816) 0
 dense (Dense) (None, 128) 1384576
 dense_1 (Dense) (None, 10) 1290
=================================================================
Total params: 1,386,506
Trainable params: 1,386,506
Non-trainable params: 0
_________________________________________________________________
from tensorflow.keras.callbacks import EarlyStopping
early_stop = EarlyStopping(monitor='val_loss', patience=2)
model.fit(X_train, y_train_cat, epochs=2, verbose=1)
Epoch 1/2
1875/1875 [==============================] - 81s 41ms/step - loss: 0.3792 - accuracy: 0.8653
Epoch 2/2
1875/1875 [==============================] - 74s 39ms/step - loss: 0.2561 - accuracy: 0.9058
<keras.callbacks.History at 0x7fb0a843bf40>
y_pred = model.predict(X_test)
313/313 [==============================] - 3s 8ms/step
y_pred_cat = np.argmax(y_pred, axis=1)
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred_cat))
 precision recall f1-score support
 0 0.79 0.91 0.85 1000
 1 0.99 0.98 0.98 1000
 2 0.89 0.78 0.83 1000
 3 0.92 0.88 0.90 1000
 4 0.79 0.90 0.84 1000
 5 0.98 0.98 0.98 1000
 6 0.75 0.67 0.71 1000
 7 0.95 0.95 0.95 1000
 8 0.98 0.98 0.98 1000
 9 0.95 0.96 0.96 1000
 accuracy 0.90 10000
11/8/23, 3:05 AM ANN 12.ipynb - Colaboratory
https://colab.research.google.com/drive/1rDN1bZLaP64KwP2v8t0dbPzXhH43U_uq#printMode=true 4/4
 macro avg 0.90 0.90 0.90 10000
weighted avg 0.90 0.90 0.90 10000
<matplotlib.image.AxesImage at 0x7fb0730f6290>
#check visually
plt.imshow(X_test[186])
# 0 T-shirt/top
# 1 Trouser
# 2 Pullover
# 3 Dress
# 4 Coat
# 5 Sandal
# 6 Shirt
# 7 Sneaker
# 8 Bag
# 9 Ankle boot
y_pred_cat[186]